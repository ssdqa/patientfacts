% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_output.R
\name{pf_output}
\alias{pf_output}
\title{Clinical Facts per Patient -- Output Generation}
\usage{
pf_output(
  process_output,
  output_function,
  output,
  date_breaks_str = "1 year",
  domain_filter = NULL,
  visit_filter = NULL
)
}
\arguments{
\item{process_output}{the summary dataframe output by the \code{pf_process} function.

Note any patient-level results generated are not intended to be used with this function.}

\item{output_function}{the name of the output function that should be executed, provided in the message output
to the console after \code{pf_process} has been executed}

\item{output}{the numerical variable in \code{process_output} that should be used to generate the graph}

\item{date_breaks_str}{for \code{pf_ss_exp_la} only, a string that informs the program how the
time period should be divided (i.e. '1 year', '3 months', etc). Defaults to 1 year.}

\item{domain_filter}{for \code{pf_ms_anom_la} only, the single domain to which the graph should be filtered for displaying
Euclidean distance values}

\item{visit_filter}{for \code{pf_ms_anom_la} only, the single visit type to which the graph should be filtered for displaying
Euclidean distance values}
}
\value{
a graph summarizing the data output by \code{pf_process}; see individual output functions for specific details
}
\description{
Using the tabular output generated by \code{pf_process}, this function will build a graph to
visualize the results. Each function configuration will output a bespoke ggplot. Theming can
be adjusted by the user after the graph has been output using \code{+ theme()}. Most graphs can
also be made interactive using \code{make_interactive_ssdqa()}
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'patientfacts'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'pf_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = 'extdata',
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000), # RSQLite does not store date objects,
                                      # hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Execute `pf_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
pf_process_example <- pf_process(cohort = cohort,
                                 study_name = 'example_study',
                                 multi_or_single_site = 'single',
                                 anomaly_or_exploratory = 'exploratory',
                                 visit_type_table =
                                   patientfacts::pf_visit_file_omop,
                                 omop_or_pcornet = 'omop',
                                 visit_types = c('all'),
                                 domain_tbl = patientfacts::pf_domain_file \%>\%
                                   dplyr::filter(domain == 'diagnoses'))

pf_process_example

#' Execute `pf_output` function
#' The output was edited for a better indication of what the visualization will
#' look like.
#' The 0s are a limitation of the small sample data set used for this example
pf_output_example <- pf_output(process_output = pf_process_example \%>\%
                                 dplyr::mutate(median_site_without0s = 4),
                               output_function = 'pf_ss_exp_cs',
                               output = 'median_site_without0s')

pf_output_example
}
