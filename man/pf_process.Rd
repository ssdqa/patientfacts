% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pf_process.R
\name{pf_process}
\alias{pf_process}
\title{Patient Facts}
\usage{
pf_process(
  cohort = cohort,
  study_name = "my_study",
  patient_level_tbl = FALSE,
  visit_types = c("outpatient", "inpatient"),
  omop_or_pcornet = "omop",
  multi_or_single_site = "single",
  time = FALSE,
  time_span = c("2014-01-01", "2023-01-01"),
  time_period = "year",
  p_value = 0.9,
  age_groups = NULL,
  anomaly_or_exploratory = "exploratory",
  domain_tbl = patientfacts::pf_domain_file,
  visit_tbl = cdm_tbl("visit_occurrence"),
  visit_type_table = patientfacts::pf_visit_file_omop
)
}
\arguments{
\item{cohort}{\emph{tabular input} | A dataframe with the cohort of patients for your study. Should include the columns:
\itemize{
\item \code{person_id} / \code{patid} | \emph{integer} / \emph{character}
\item \code{start_date} | \emph{date}
\item \code{end_date} | \emph{date}
\item \code{site} | \emph{date}
}}

\item{study_name}{\emph{string} | A custom string label with the name of your study}

\item{patient_level_tbl}{\emph{boolean} | logical indicating whether an additional table with patient level results should be output;
if TRUE, the output of this function will be a list containing both the summary and patient level
output. Otherwise, this function will just output the summary dataframe}

\item{visit_types}{\emph{vector} | A vector of visit types by which the output should be stratified. Options for visit types can be found or adjusted
in the provided \code{pf_visit_file_(omop/pcornet)} file. If you would not like to stratify your results by visit type, please
set the visit_types argument equal to \code{all}}

\item{omop_or_pcornet}{\emph{string} | Option to run the function using the OMOP or PCORnet CDM as the default CDM
\itemize{
\item \code{omop}: run the \code{\link[=pf_process_omop]{pf_process_omop()}} function against an OMOP CDM instance
\item \code{pcornet}: run the \code{\link[=pf_process_pcornet]{pf_process_pcornet()}} function against a PCORnet CDM instance
}}

\item{multi_or_single_site}{\emph{string} | Option to run the function on a single vs multiple sites
\itemize{
\item \code{single}: run the function for a single site
\item \code{multi}: run the function for multiple sites
}}

\item{time}{\emph{boolean} | a logical that tells the function whether you would like to look at the output cross-sectionally (FALSE) or longitudinally (TRUE)}

\item{time_span}{\emph{vector - length 2} | when \code{time = TRUE}, this argument defines the start and end dates for the time period of interest. should be
formatted as \verb{c(start date, end date)} in \code{yyyy-mm-dd} date format.}

\item{time_period}{\emph{string} | when \code{time = TRUE}, this argument defines the distance between dates within the specified time period. defaults
to \code{year}, but other time periods such as \code{month} or \code{week} are also acceptable}

\item{p_value}{\emph{numeric} | an integer indicating the p value to be used as a threshold in the multi-site anomaly detection analysis}

\item{age_groups}{\emph{tabular input} | If you would like to stratify the results by age group, create a table or CSV file with the following
columns and include it as the \code{age_groups} function parameter:
\itemize{
\item \code{min_age} | \emph{integer} | the minimum age for the group (i.e. 10)
\item \code{max_age} | \emph{integer} | the maximum age for the group (i.e. 20)
\item \code{group} | \emph{character} | a string label for the group (i.e. "10-20", "Young Adult", etc.)
}

If you would \emph{not} like to stratify by age group, leave the argument as \code{NULL}}

\item{anomaly_or_exploratory}{\emph{string} | Option to conduct an \code{exploratory} or \code{anomaly} detection analysis.
Exploratory analyses give a high level summary of the data to examine the
fact representation within the cohort. Anomaly detection analyses are specialized to identify
outliers within the cohort.}

\item{domain_tbl}{\emph{tabular input} | a table that defines the domains where facts should be identified. defaults to the provided
\code{pf_domain_file} table, which contains the following fields:
\itemize{
\item \code{domain} | \emph{character} | a string label for the domain being examined (i.e. prescription drugs)
\item \code{domain_tbl} | \emph{character} | the CDM table where information for this domain can be found (i.e. drug_exposure)
\item \code{filter_logic} | \emph{character} | an optional string to be parsed as logic to filter the domain_tbl as needed to best represent the domain
}}

\item{visit_tbl}{the CDM table with visit information (i.e. visit_occurrence or encounter)}

\item{visit_type_table}{\emph{tabular input} | a table that defines available visit types that are called in \code{visit_types.} defaults to the provided
\code{pf_visit_file_(omop/pcornet)} file, which contains the following fields:
\itemize{
\item \code{visit_concept_id} / \code{visit_detail_concept_id} or \code{enc_type} | \emph{integer} or \emph{character} | the visit_(detail)_concept_id or enc_type that represents the visit type of interest (i.e. 9201 or IP)
\item \code{visit_type} | \emph{character} | the string label to describe the visit type; this label can be used multiple times
within the file if multiple visit_concept_ids/enc_types represent the visit type
}}
}
\value{
a dataframe with summary results (i.e. medians) that can be used as the input for \code{pf_output} to generate graphical output

if \code{patient_level_tbl = TRUE}, an additional dataframe is returned in a list format with patient level output
}
\description{
This is a completeness module that will compute the number of facts per years of follow-up for each patient in
a cohort. The user will provide the domains (\code{domain_tbl}) and visit types (\code{visit_type_tbl}) of interest.
Sample versions of these inputs are included as data in the package and are accessible with \verb{patientfacts::}.
Results can optionally be stratified by site, age group, visit type, and/or time. This function is compatible with
both the OMOP and the PCORnet CDMs based on the user's selection.
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'patientfacts'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'pf_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = 'extdata',
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000), # RSQLite does not store date objects,
                                      # hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Execute `pf_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
pf_process_example <- pf_process(cohort = cohort,
                                 study_name = 'example_study',
                                 multi_or_single_site = 'single',
                                 anomaly_or_exploratory = 'exploratory',
                                 visit_type_table =
                                   patientfacts::pf_visit_file_omop,
                                 omop_or_pcornet = 'omop',
                                 visit_types = c('all'),
                                 domain_tbl = patientfacts::pf_domain_file \%>\%
                                   dplyr::filter(domain == 'diagnoses'))

pf_process_example

#' Execute `pf_output` function
#' The output was edited for a better indication of what the visualization will
#' look like.
#' The 0s are a limitation of the small sample data set used for this example
pf_output_example <- pf_output(process_output = pf_process_example \%>\%
                                 dplyr::mutate(median_site_without0s = 4),
                               output = 'median_site_without0s')

pf_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_squba()`

make_interactive_squba(pf_output_example)
}
